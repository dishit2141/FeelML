{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNKE6eYwBM/9TYG52OlNv4L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"2ztxMiFXfX4Y"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"raMN9CDlflhu"},"source":["# Priority Queues and Heaps"]},{"cell_type":"markdown","metadata":{"id":"emND0sA9flhy"},"source":["## The `heapq` module\n","\n","The `heapq` module provides functions for adding and removing elements to and from a heap.\n","\n"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"4zxrR8Azflhy","executionInfo":{"status":"ok","timestamp":1727138966027,"user_tz":-330,"elapsed":3,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["from heapq import heappush, heappop"]},{"cell_type":"markdown","metadata":{"id":"sSOJ8vgfflhz"},"source":["The heap itself is literally a list, so if you create an empty list, you can think of it as a heap with no elements."]},{"cell_type":"code","execution_count":3,"metadata":{"id":"LLy-_KeUflhz","executionInfo":{"status":"ok","timestamp":1727138966028,"user_tz":-330,"elapsed":3,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["heap = []"]},{"cell_type":"markdown","metadata":{"id":"4AvS7O5sflhz"},"source":["Then you can use `heappush` to add one element at a time."]},{"cell_type":"code","execution_count":4,"metadata":{"id":"cvBCtRSZflh0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727138972030,"user_tz":-330,"elapsed":1707,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"d1f19a23-9cb9-433d-e0c5-1cd357d518a6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 5, 7, 4, 6, 9, 8]"]},"metadata":{},"execution_count":4}],"source":["data = [4, 9, 3, 7, 5, 1, 6, 8, 2]\n","\n","for x in data:\n","    heappush(heap, x)\n","\n","heap"]},{"cell_type":"markdown","metadata":{"id":"2cGXcMo1flh0"},"source":["The result is a list that represents a tree.\n","Here's how the correspondence works between the list representation and the tree representation:\n","\n","* The first element (index 0) is the root.\n","\n","* The next two elements are the children of the root.\n","\n","* The next four element are the grandchildren of the root.\n","\n","And so on."]},{"cell_type":"markdown","metadata":{"id":"gP24q-HWflh0"},"source":["In general, if the index of an element is `i`, its parent is `(i-1)//2` and its children are `2*i + 1` and `2*i + 2`."]},{"cell_type":"markdown","metadata":{"id":"pWRxHu2Uflh0"},"source":["## Drawing the Tree\n","\n","To generate the tree representation of the heap, the following function iterates through the heap and makes a NetworkX graph with an edge between each node and its parent."]},{"cell_type":"code","execution_count":5,"metadata":{"id":"OKmnkAd_flh0","executionInfo":{"status":"ok","timestamp":1727139037509,"user_tz":-330,"elapsed":518,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["import networkx as nx\n","\n","def make_dag(heap):\n","    \"\"\"Make a NetworkX graph that represents the heap.\"\"\"\n","    G = nx.DiGraph()\n","\n","    for i in range(1, len(heap)):\n","        parent = (i-1)//2\n","        G.add_edge(parent, i)\n","\n","    return G"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"EebzO4JTflh0","executionInfo":{"status":"ok","timestamp":1727139045090,"user_tz":-330,"elapsed":618,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["G = make_dag(heap)"]},{"cell_type":"markdown","metadata":{"id":"6XbLCAX4flh0"},"source":["To draw the tree, we'll use a module called `EoN` that provides a function called [hierarchy_pos](https://epidemicsonnetworks.readthedocs.io/en/latest/functions/EoN.hierarchy_pos.html#EoN.hierarchy_pos).\n","\n","It takes as a parameter a NetworkX graph that represents a tree, and it returns a dictionary that maps from each node to a position in the Cartesian plane.\n","If we pass this dictionary to `nx.draw`, it lays the tree out accordingly."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7ZDnNqsgflh1"},"outputs":[],"source":["try:\n","    import EoN\n","except ImportError:\n","    !pip install EoN"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"HuXjmL3eflh1","executionInfo":{"status":"ok","timestamp":1727139062537,"user_tz":-330,"elapsed":1787,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["from EoN import hierarchy_pos\n","\n","def draw_heap(heap):\n","    G = make_dag(heap)\n","    pos = hierarchy_pos(G)\n","    labels = dict(enumerate(heap))\n","    nx.draw(G, pos, labels=labels, alpha=0.4)"]},{"cell_type":"markdown","metadata":{"id":"rggsWEfPflh1"},"source":["Here's what the tree representation looks like."]},{"cell_type":"code","execution_count":9,"metadata":{"id":"2Iy5lsUDflh1","colab":{"base_uri":"https://localhost:8080/","height":533},"executionInfo":{"status":"ok","timestamp":1727139070684,"user_tz":-330,"elapsed":570,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"816db341-2520-4780-d4dd-4d9b09344279"},"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 5, 7, 4, 6, 9, 8]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["print(heap)\n","draw_heap(heap)"]},{"cell_type":"markdown","metadata":{"id":"-rRW1XJTflh1"},"source":["## The Heap Property\n","\n","If the list is a heap, the tree should have the heap property:\n","\n","> Every parent is less than or equal to its children.\n","\n","Or more formally:\n","\n","> For all pairs of nodes P and C, where P is the parent of C, the value of P must be less than or equal to the value of C.\n","\n","The following function checks whether this property is true for all nodes."]},{"cell_type":"code","execution_count":10,"metadata":{"id":"sbqAhW0oflh1","executionInfo":{"status":"ok","timestamp":1727139179202,"user_tz":-330,"elapsed":517,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def is_heap(heap):\n","    \"\"\"Check if a sequence has the heap property.\n","\n","    Every child should be >= its parent.\n","    \"\"\"\n","    for i in range(1, len(heap)):\n","        parent = (i-1) // 2\n","        if heap[parent] > heap[i]:\n","            return False\n","    return True"]},{"cell_type":"markdown","metadata":{"id":"G7HKa_mRflh1"},"source":["As we might hope, `heap` is a heap."]},{"cell_type":"code","execution_count":11,"metadata":{"id":"d_h6gMWBflh1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727139185143,"user_tz":-330,"elapsed":515,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"0d7bc7ec-2c9a-4db7-8fcc-1bbcbe44970e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":11}],"source":["is_heap(heap)"]},{"cell_type":"markdown","metadata":{"id":"wjm0i09yflh1"},"source":["Here's a list of integers in no particular order, and as you might expect, it does not have the heap property."]},{"cell_type":"code","execution_count":12,"metadata":{"id":"XmxJ0oQYflh1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727139190663,"user_tz":-330,"elapsed":501,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"897586c6-379b-4aae-aed6-f6abeae1e29d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":12}],"source":["data = [4, 9, 3, 7, 5, 1, 6, 8, 2]\n","is_heap(data)"]},{"cell_type":"markdown","metadata":{"id":"OlsqpXLuflh1"},"source":["## Using a Heap to Sort\n","\n","Given a heap, we can implement a sort algorithm called [heapsort](https://en.wikipedia.org/wiki/Heapsort).\n","\n","Let's start again with a fresh heap:"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"SrkV4doEflh1","executionInfo":{"status":"ok","timestamp":1727139363310,"user_tz":-330,"elapsed":517,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["heap = [10,20,30,50,40,60,70]\n","for x in data:\n","    heappush(heap, x)"]},{"cell_type":"markdown","metadata":{"id":"iyZ4FNQ6flh2"},"source":["If we know that a list is a heap, we can use `heappop` to find and remove the smallest element."]},{"cell_type":"code","execution_count":14,"metadata":{"id":"tAmpKU5Iflh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727139366326,"user_tz":-330,"elapsed":463,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"9cb8e58c-8a96-4128-a453-2656da89b6c9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":14}],"source":["heappop(heap)"]},{"cell_type":"markdown","metadata":{"id":"WgHCCidtflh2"},"source":["`heappop` rearranges the remaining elements of the list to restore the heap property (we'll see how soon)."]},{"cell_type":"code","execution_count":15,"metadata":{"id":"oRjaQQ1dflh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727139804477,"user_tz":-330,"elapsed":515,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"4d17e2b4-b4a6-4db2-b648-aceee4866207"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 3, 10, 7, 5, 6, 50, 20, 40, 9, 60, 30, 70, 8]"]},"metadata":{},"execution_count":15}],"source":["heap"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"5vCyb2R-flh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727139839299,"user_tz":-330,"elapsed":416,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"e1e0c1cc-1c6e-46ee-8810-593904d50d45"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":16}],"source":["is_heap(heap)"]},{"cell_type":"markdown","metadata":{"id":"EFP5aNwNflh2"},"source":["And that means we can use `heappop` again to get the second smallest element (of the original heap):"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"YA8wsi4Mflh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727139845649,"user_tz":-330,"elapsed":519,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"cadc5307-2f22-4a1e-9b8b-8515160f9fc7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":17}],"source":["heappop(heap)"]},{"cell_type":"markdown","metadata":{"id":"DXIL3ZH7flh2"},"source":["Which means we can use a heap to sort a list."]},{"cell_type":"markdown","metadata":{"id":"mFGRqYCbflh2"},"source":["**Exercise:** Write a generator function called `heapsort`\n","that takes an iterable and yields the elements of the iterable in increasing order."]},{"cell_type":"code","execution_count":24,"metadata":{"id":"IBZYmWvUflh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727140552106,"user_tz":-330,"elapsed":509,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"0d750f6f-0487-455a-a1ae-705ac93bb929"},"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted elements:\n","9\n","6\n","5\n","4\n","3\n","2\n","1\n","1\n"]}],"source":["from heapq import heappush, heappop\n","\n","def heapsort(iterable):\n","    heap = []\n","    for item in iterable:\n","        heappush(heap, -item)  # Push negative values to build a max-heap\n","\n","    while heap:\n","        yield -heappop(heap)  # Pop and yield the maximum element\n","\n","if __name__ == \"__main__\":\n","    data = [3, 1, 4, 1, 5, 9, 2, 6]\n","    sorted_data = heapsort(data)\n","\n","    print(\"Sorted elements:\")\n","    for number in sorted_data:\n","        print(number)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GI55wT0Qflh2"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GWQs3eXrflh2"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"ybc86rd4flh6"},"source":["Now let's see how a heap is implemented.\n","The two key methods are `push` and `pop`."]},{"cell_type":"markdown","metadata":{"id":"HonuUg8Xflh6"},"source":["## Push\n","\n","To insert an element in a heap, you start by appending it to the list.\n","\n","The result is generally not a heap, so you have to do some work to restore the heap property:\n","\n","* If the new element is greater than or equal to its parent, you are done.\n","\n","* Otherwise swap the new element with its parent.\n","\n","* If the new element is greater than or equal to the parent's parent, you are done.\n","\n","* Otherwise swap the new element with its parent's parent.\n","\n","* And repeat, working your way up the tree, until you're done or you reach the root."]},{"cell_type":"markdown","metadata":{"id":"1T7BJiLcflh6"},"source":["This process is called \"sift-up\" or sometimes [swim](https://en.wikipedia.org/wiki/Heap_(data_structure)#Implementation)."]},{"cell_type":"markdown","metadata":{"id":"x2YE0DAoflh6"},"source":["**Exercise:** Write a function called `push` that does the same thing as `heappush`: it should take as parameters a list (which should be a heap) and a new element; it should add the new element to the list and restore the heap property."]},{"cell_type":"code","execution_count":38,"metadata":{"id":"yAXEksVrflh6","executionInfo":{"status":"ok","timestamp":1727141361412,"user_tz":-330,"elapsed":503,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["import heapq\n","def push(list,n):\n","  heapq.heappush(list,n)"]},{"cell_type":"markdown","metadata":{"id":"M9CpUtxCflh6"},"source":["You can use this example to test your code:"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"ePDFk-Wtflh7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727141431452,"user_tz":-330,"elapsed":406,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"3ec9bef8-4d39-4aa1-d6f1-91faa009e6df"},"outputs":[{"output_type":"stream","name":"stdout","text":["Final heap: [1, 3, 2, 6, 4, 5]\n"]}],"source":[" # Initial empty heap\n","heap = []\n","\n","    # Data to push into the heap\n","data = [5, 6, 2, 3, 4, 1]\n","\n","    # Push each element into the heap and check if it is a valid heap\n","for x in data:\n","    push(heap, x)\n","    assert is_heap(heap), f\"Heap property violated after inserting {x}\"\n","\n","print(\"Final heap:\", heap)"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"VZeOWQaDflh7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727141438414,"user_tz":-330,"elapsed":414,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"bd444fa5-aac4-4ba4-ab71-7ffd362e48d4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":41}],"source":["is_heap(heap)"]},{"cell_type":"markdown","metadata":{"id":"Ng-MMfwPflh7"},"source":["## Pop\n","\n","To remove an element from the heap, you:\n","\n","* Make a copy of the root element,\n","\n","* Pop the *last* element off the list and store it at the root.\n","\n","* Then you have to restore the heap property. If the new root is less than or equal to both of its children, you are done.\n","\n","* Otherwise, swap the parent with the smaller of its children.\n","\n","* Then repeat the process with the child you just replaced, and continue until you get to a leaf node.\n","\n","This process is called a \"sift-down\" or sometimes \"sink\"."]},{"cell_type":"markdown","metadata":{"id":"Uo2xf88qflh7"},"source":["**Exercise:** Write a function called `pop` that does the same thing as `heappop`: it should remove the smallest element, restore the heap property, and return the smallest element.\n","\n","Hint: This one is tricky because you have to deal with several special cases."]},{"cell_type":"code","execution_count":45,"metadata":{"id":"EGEamQxaflh7","executionInfo":{"status":"ok","timestamp":1727141922554,"user_tz":-330,"elapsed":413,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def heapify(heap, n, i):\n","    smallest = i\n","    left = 2 * i + 1\n","    right = 2 * i + 2\n","\n","    if left < n and heap[smallest] > heap[left]:\n","        smallest = left\n","    if right < n and heap[smallest] > heap[right]:\n","        smallest = right\n","\n","    if smallest != i:\n","        heap[i], heap[smallest] = heap[smallest], heap[i]\n","        heapify(heap, n, smallest)\n","\n","def pop(heap):\n","    if len(heap) == 0:\n","        return None  # Return None if the heap is empty\n","    if len(heap) == 1:\n","        return heap.pop()  # Return the only element\n","\n","    root = heap[0]  # Store the smallest element\n","    heap[0] = heap[-1]  # Replace root with the last element\n","    heap.pop()  # Remove the last element\n","    heapify(heap, len(heap), 0)  # Restore the heap property\n","\n","    return root  # Return the smallest element"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"8Uqn2kCTflh7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727141934039,"user_tz":-330,"elapsed":426,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"f6f99ef3-be4f-4acd-e08e-a75d564695ef"},"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n"]}],"source":["data = [1,3,2,4,5]\n","for x in data:\n","    heappush(heap, x)\n","\n","while heap:\n","    print(pop(heap))\n","    assert is_heap(heap)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZhGDoBpnflh7"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d9BmQH71flh7"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"Zwo32dn5fxd7"},"source":["# Huffman Code"]},{"cell_type":"markdown","metadata":{"id":"svUkdll1fxd_"},"source":["A [Huffman code](https://en.wikipedia.org/wiki/Huffman_coding) is a \"type of optimal prefix code that is commonly used for lossless data compression\".\n","There are three parts of that definition we have to unpack: \"code\", \"prefix\", and \"optimal\".\n","\n","In this context, a \"code\" is a mapping from symbols to bit strings.\n","For example, [ASCII](https://en.wikipedia.org/wiki/ASCII) is a character encoding that maps from characters (like letters, numbers, and punctuation) to seven-bit integers.\n","Since all ASCII bit strings are the same length, it is a \"fixed-length code\", as contrasted with Huffman codes, which are \"variable-length codes\".\n","\n","In order to decode something encoded in a variable-length code, there has to be some way to figure out where one bit string ends and the next begins.\n","In general, there are three ways to solve this problem:\n","\n","* One option is to begin each bit string with a special sequence that indicates its length. This is [how Unicode works](https://stackoverflow.com/questions/1543613/how-does-utf-8-variable-width-encoding-work).\n","\n","* Another option is to end each bit string with a special sequence that marks the end.\n","\n","* The third option is to use a \"prefix code\", which is how Huffman codes work.\n","\n","A prefix code is a code where no whole bit string in the code is a prefix of any bit string in the code.\n","If a code has this property, we can decode it by reading bits one at a time and checking to see whether we have completed a valid bit string.\n","If so, we know we are at the end of the bit string, because it cannot be the prefix of another bit string.\n","\n","For example, the following is a prefix code with only three symbols:\n","\n","```\n","symbol        bit string\n","x             1\n","y             01\n","z             001\n","```\n","\n","In this code, we can encode the string `xyz` with the bit string `101001`, and we can decode the result without ambiguity.\n","\n","So that's what it means to say that a Huffman code is a prefix code; finally, Huffman codes are \"optimal\" in the sense that they give short codes to the most common symbols and longer codes to the least common symbols.\n","The result is that they minimize the average number of bits needed to encode a sequence of symbols.\n","\n","However, in order to achieve this feat, we have to know the relative frequencies of the symbols.\n","One way to do that is to start with a \"corpus\", which is a text that contains the symbols in the proportions we expect for the text we will encode.\n","\n","As an example, I'll use the text from the [Huffman code Wikipedia page](https://en.wikipedia.org/wiki/Huffman_coding)."]},{"cell_type":"code","execution_count":49,"metadata":{"id":"Zlei19tUfxeA","executionInfo":{"status":"ok","timestamp":1727142750166,"user_tz":-330,"elapsed":6,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["text = 'this is an example of a huffman tree'"]},{"cell_type":"markdown","metadata":{"id":"GwDvd9gQfxeB"},"source":["We can use a `Counter` to count the number of times each symbol appears in this text."]},{"cell_type":"code","execution_count":50,"metadata":{"id":"tTWvoplCfxeC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727142753602,"user_tz":-330,"elapsed":3,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"d0f15291-abd1-43f3-b89a-ffe90e7461f6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Counter({'t': 2,\n","         'h': 2,\n","         'i': 2,\n","         's': 2,\n","         ' ': 7,\n","         'a': 4,\n","         'n': 2,\n","         'e': 4,\n","         'x': 1,\n","         'm': 2,\n","         'p': 1,\n","         'l': 1,\n","         'o': 1,\n","         'f': 3,\n","         'u': 1,\n","         'r': 1})"]},"metadata":{},"execution_count":50}],"source":["from collections import Counter\n","\n","c = Counter(text)\n","c"]},{"cell_type":"markdown","metadata":{"id":"4GfC06NvfxeC"},"source":["Now let's see how we can use these counts to build a Huffman code.\n","The first step is to build a Huffman tree, which is a binary tree where every node contains a count and some nodes contain symbols.\n","\n","To make a Huffman tree, we start with a sequence of nodes, one for each symbol.\n","To represent nodes, I'll use a `namedtuple`."]},{"cell_type":"code","execution_count":51,"metadata":{"tags":[],"id":"tInhKiZXfxeC","executionInfo":{"status":"ok","timestamp":1727142818258,"user_tz":-330,"elapsed":514,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["from collections import namedtuple\n","\n","Node = namedtuple('Node', ['count', 'letter', 'left', 'right'])"]},{"cell_type":"markdown","metadata":{"id":"4JBGsAILfxeD"},"source":["For example, here's a node that represents the symbol `a` with count `4`.\n","Since this node has no children, it is a leaf node."]},{"cell_type":"code","execution_count":52,"metadata":{"tags":[],"id":"FcWQvyV0fxeD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727142821166,"user_tz":-330,"elapsed":4,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"1b08d357-c448-46b5-9612-3a40068e1938"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Node(count=4, letter='a', left=None, right=None)"]},"metadata":{},"execution_count":52}],"source":["left = Node(4, 'a', None, None)\n","left"]},{"cell_type":"markdown","metadata":{"id":"l01HT3pWfxeD"},"source":["And here's another leaf node that represents the symbol `n` and its count."]},{"cell_type":"code","execution_count":53,"metadata":{"tags":[],"id":"9ETGsvCTfxeD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727142833725,"user_tz":-330,"elapsed":1332,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"594cb6a7-8398-42dd-8418-9e3b3f2e8fc8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Node(count=2, letter='n', left=None, right=None)"]},"metadata":{},"execution_count":53}],"source":["right = Node(2, 'n', None, None)\n","right"]},{"cell_type":"markdown","metadata":{"id":"dkQ85FBIfxeE"},"source":["One reason we're using a namedtuple is that it behaves like a tuple, so if we compare two `Node` objects, we get a tuple-like sorting order."]},{"cell_type":"code","execution_count":54,"metadata":{"tags":[],"id":"FNwY_WZTfxeE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727142840069,"user_tz":-330,"elapsed":413,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"87bd5abc-1ef6-469a-98dc-de8ecefd2255"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":54}],"source":["left > right"]},{"cell_type":"markdown","metadata":{"id":"IopW_dfXfxeE"},"source":["If two nodes have the same `count`, they get sorted in alphabetical order by `letter`."]},{"cell_type":"markdown","metadata":{"id":"nOsiOapVfxeE"},"source":["## Making trees\n","\n","Given these two leaf nodes, we can make a tree like this:"]},{"cell_type":"code","execution_count":55,"metadata":{"tags":[],"id":"jGHCVcHTfxeE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727142848888,"user_tz":-330,"elapsed":419,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"cdbd1f99-eb3c-4e7b-ee1d-50d34e1756ce"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Node(count=6, letter='\\x00', left=Node(count=4, letter='a', left=None, right=None), right=Node(count=2, letter='n', left=None, right=None))"]},"metadata":{},"execution_count":55}],"source":["count = left.count + right.count\n","root = Node(count, '\\0', left, right)\n","root"]},{"cell_type":"markdown","metadata":{"id":"gHkV7aJTfxeE"},"source":["Because `root` has children, it is not a leaf node; it is an interior node.\n","In a Huffman tree, the interior nodes do not represent symbols, so I have set `letter` to the null character `\\0`.\n","The count of an interior node is the sum of the count of its children."]},{"cell_type":"markdown","metadata":{"id":"fSuCu5R5fxeE"},"source":["Now, to build a Huffman tree, we'll start with a collection of nodes, one for each symbol, and build the tree \"bottom up\" by following these steps:\n","\n","1) Remove the node with the lowest count.\n","\n","2) Remove the node with the next lowest count.\n","\n","3) Make a new node with the nodes we just removed as children.\n","\n","4) Put the new node back into the collection.\n","\n","5) If there's only one node in the collection, it's the Huffman tree, and we're done.\n","\n","In general, we could use any kind of collection, but if we look at the operations required by this algorithm, the most efficient option is a heap."]},{"cell_type":"markdown","metadata":{"id":"w9F9WVJ9fxeE"},"source":["But we'll start by iterating through the `Counter` and making a list of `Node` objects,"]},{"cell_type":"code","execution_count":56,"metadata":{"tags":[],"id":"OhFrNR_ofxeE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727142915850,"user_tz":-330,"elapsed":520,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"64d3df06-676f-47ac-f8ad-845435edd8ec"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Node(count=2, letter='t', left=None, right=None),\n"," Node(count=2, letter='h', left=None, right=None),\n"," Node(count=2, letter='i', left=None, right=None),\n"," Node(count=2, letter='s', left=None, right=None),\n"," Node(count=7, letter=' ', left=None, right=None),\n"," Node(count=4, letter='a', left=None, right=None),\n"," Node(count=2, letter='n', left=None, right=None),\n"," Node(count=4, letter='e', left=None, right=None),\n"," Node(count=1, letter='x', left=None, right=None),\n"," Node(count=2, letter='m', left=None, right=None),\n"," Node(count=1, letter='p', left=None, right=None),\n"," Node(count=1, letter='l', left=None, right=None),\n"," Node(count=1, letter='o', left=None, right=None),\n"," Node(count=3, letter='f', left=None, right=None),\n"," Node(count=1, letter='u', left=None, right=None),\n"," Node(count=1, letter='r', left=None, right=None)]"]},"metadata":{},"execution_count":56}],"source":["nodes = [Node(count, letter, None, None)\n","         for (letter, count) in c.items()]\n","nodes"]},{"cell_type":"markdown","metadata":{"id":"11S0Uqn5fxeE"},"source":["Next we'll use the heap module to convert the list to a heap."]},{"cell_type":"code","execution_count":57,"metadata":{"tags":[],"id":"r20Tj7YffxeE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727142918948,"user_tz":-330,"elapsed":434,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"c1647cc3-0f23-4979-a533-a21cbf6f478a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Node(count=1, letter='l', left=None, right=None),\n"," Node(count=1, letter='p', left=None, right=None),\n"," Node(count=1, letter='o', left=None, right=None),\n"," Node(count=1, letter='r', left=None, right=None),\n"," Node(count=2, letter='h', left=None, right=None),\n"," Node(count=2, letter='i', left=None, right=None),\n"," Node(count=1, letter='u', left=None, right=None),\n"," Node(count=2, letter='s', left=None, right=None),\n"," Node(count=1, letter='x', left=None, right=None),\n"," Node(count=2, letter='m', left=None, right=None),\n"," Node(count=7, letter=' ', left=None, right=None),\n"," Node(count=4, letter='a', left=None, right=None),\n"," Node(count=2, letter='t', left=None, right=None),\n"," Node(count=3, letter='f', left=None, right=None),\n"," Node(count=2, letter='n', left=None, right=None),\n"," Node(count=4, letter='e', left=None, right=None)]"]},"metadata":{},"execution_count":57}],"source":["from heapq import heapify, heappop, heappush\n","\n","heap = nodes.copy()\n","heapify(heap)\n","heap"]},{"cell_type":"markdown","metadata":{"id":"5XY8tJIifxeF"},"source":["Now we can use the heap to make a tree.\n","\n","**Exercise:** Write a function called `make_tree` that takes a heap of `Node` objects and uses the algorithm I described to make and return a Huffman tree. In other words, it should join up the nodes into a tree and return the root node."]},{"cell_type":"code","execution_count":70,"metadata":{"id":"2xcrfJ-xfxeF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727143329025,"user_tz":-330,"elapsed":428,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"9a3ab6b1-f781-4d69-ba9d-32fc5582b368"},"outputs":[{"output_type":"stream","name":"stdout","text":["Huffman Tree Codes:\n","Character: m, Frequency: 2, Code: 000\n","Character: l, Frequency: 1, Code: 0010\n","Character: x, Frequency: 1, Code: 0011\n","Character: u, Frequency: 1, Code: 0100\n","Character: o, Frequency: 1, Code: 0101\n","Character: r, Frequency: 1, Code: 0110\n","Character: p, Frequency: 1, Code: 0111\n","Character: s, Frequency: 2, Code: 100\n","Character: i, Frequency: 2, Code: 1010\n","Character: h, Frequency: 2, Code: 1011\n","Character:  , Frequency: 7, Code: 11\n"]}],"source":["import heapq\n","\n","class Node:\n","    def __init__(self, count, letter):\n","        self.count = count  # Frequency of the character\n","        self.letter = letter  # Character itself\n","        self.left = None  # Left child\n","        self.right = None  # Right child\n","\n","    def __lt__(self, other):\n","        return self.count < other.count  # Compare based on frequency\n","\n","    def __repr__(self):\n","        return f\"Node(count={self.count}, letter='{self.letter}')\"\n","\n","def make_tree(nodes):\n","    # Create a min-heap from the list of nodes\n","    heapq.heapify(nodes)\n","\n","    while len(nodes) > 1:\n","        # Remove the two nodes with the lowest frequency\n","        left = heapq.heappop(nodes)\n","        right = heapq.heappop(nodes)\n","\n","        # Create a new internal node with these two nodes as children\n","        merged_node = Node(left.count + right.count, None)  # Internal node has no character\n","        merged_node.left = left\n","        merged_node.right = right\n","\n","        # Add the new node back into the heap\n","        heapq.heappush(nodes, merged_node)\n","\n","    # The remaining node is the root of the Huffman tree\n","    return nodes[0] if nodes else None\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Example list of nodes (as provided)\n","    nodes = [\n","        Node(count=1, letter='l'),\n","        Node(count=1, letter='p'),\n","        Node(count=1, letter='o'),\n","        Node(count=1, letter='r'),\n","        Node(count=2, letter='h'),\n","        Node(count=2, letter='i'),\n","        Node(count=1, letter='u'),\n","        Node(count=2, letter='s'),\n","        Node(count=1, letter='x'),\n","        Node(count=2, letter='m'),\n","        Node(count=7, letter=' ')\n","    ]\n","\n","    # Build the Huffman tree\n","    root = make_tree(nodes)\n","\n","    # Function to traverse and print the Huffman tree (for verification)\n","    def print_tree(node, prefix=\"\"):\n","        if node is not None:\n","            if node.letter is not None:  # Leaf node\n","                print(f\"Character: {node.letter}, Frequency: {node.count}, Code: {prefix}\")\n","            print_tree(node.left, prefix + \"0\")\n","            print_tree(node.right, prefix + \"1\")\n","\n","    # Print the Huffman tree structure and codes\n","    print(\"Huffman Tree Codes:\")\n","    print_tree(root)"]},{"cell_type":"markdown","metadata":{"id":"7SglTdcgfxeK"},"source":["## Making the Table\n","\n","The following function traverses the tree, keeping track of the path as it goes. When it finds a leaf node, it makes an entry in the table."]},{"cell_type":"code","execution_count":72,"metadata":{"tags":[],"id":"p3wtckcOfxeK","executionInfo":{"status":"ok","timestamp":1727143370715,"user_tz":-330,"elapsed":419,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def is_leaf(node):\n","    return node.left is None and node.right is None"]},{"cell_type":"code","execution_count":73,"metadata":{"tags":[],"id":"gKWz6c3xfxeK","executionInfo":{"status":"ok","timestamp":1727143373264,"user_tz":-330,"elapsed":505,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def make_table(node, path, table):\n","    if node is None:\n","        return\n","\n","    if is_leaf(node):\n","        table[node.letter] = path\n","        return\n","\n","    make_table(node.left, path+'0', table)\n","    make_table(node.right, path+'1', table)"]},{"cell_type":"code","execution_count":75,"metadata":{"tags":[],"id":"zcdZcvosfxeK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727143387392,"user_tz":-330,"elapsed":422,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"36761214-3cb3-49c1-b869-7f023c5c17eb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'m': '000',\n"," 'l': '0010',\n"," 'x': '0011',\n"," 'u': '0100',\n"," 'o': '0101',\n"," 'r': '0110',\n"," 'p': '0111',\n"," 's': '100',\n"," 'i': '1010',\n"," 'h': '1011',\n"," ' ': '11'}"]},"metadata":{},"execution_count":75}],"source":["table = {}\n","make_table(root, '', table)\n","\n","table"]},{"cell_type":"markdown","metadata":{"id":"x1pAlnsZfxeK"},"source":["## Encoding\n","\n","We can use the table to encode a string by looking up each symbol in the string and joining the results into a bit string."]},{"cell_type":"code","execution_count":82,"metadata":{"tags":[],"id":"R68ZT3DrfxeK","executionInfo":{"status":"ok","timestamp":1727143542965,"user_tz":-330,"elapsed":528,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def encode(s, table):\n","    # Use a list comprehension to build the encoded string\n","    t = []\n","    for letter in s:\n","        if letter in table:\n","            t.append(table[letter])  # Append the corresponding code\n","        else:\n","            print(f\"Warning: Character '{letter}' not found in encoding table.\")\n","            t.append('')  # Or handle it differently, e.g., append a placeholder\n","\n","    return ''.join(t)"]},{"cell_type":"markdown","metadata":{"id":"wOY4rODyfxeK"},"source":["Here's an example, noting that we can encode strings other than the corpus we started with, provided that it contains no symbols that were not in the corpus."]},{"cell_type":"code","execution_count":83,"metadata":{"tags":[],"id":"nvCEkq6nfxeK","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1727143554212,"user_tz":-330,"elapsed":400,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"bed12393-efc2-4fb1-a0ee-d40b4841bbbb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Warning: Character 't' not found in encoding table.\n","Warning: Character 'n' not found in encoding table.\n","Warning: Character 'a' not found in encoding table.\n","Warning: Character 't' not found in encoding table.\n","Warning: Character 'a' not found in encoding table.\n"]},{"output_type":"execute_result","data":{"text/plain":["'1011101010011101010011100011110100010110111'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":83}],"source":["code = encode('this is spinal tap',table)\n","code"]},{"cell_type":"markdown","metadata":{"id":"slhnP65ZfxeK"},"source":["## Decoding\n","\n","To decode the bit string, we start at the top of the tree and follow the path, turning left when we see a `0` and right when we see a `1`.\n","If we get to a leaf node, we have decoded a symbol, so we should record it and then jump back to the top of the tree to start decoding the next symbol.\n","\n","**Exercise:** Write a function called `decode` that takes as parameters a string on 0s and 1s and a Huffman tree. It should decode the message and return it as a string."]},{"cell_type":"code","execution_count":84,"metadata":{"id":"34PebkERfxeK","executionInfo":{"status":"ok","timestamp":1727143771211,"user_tz":-330,"elapsed":423,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["class Node:\n","    def __init__(self, count, letter):\n","        self.count = count  # Frequency of the character\n","        self.letter = letter  # Character itself\n","        self.left = None  # Left child\n","        self.right = None  # Right child\n","\n","    def __lt__(self, other):\n","        return self.count < other.count  # Compare based on frequency\n","\n","    def __repr__(self):\n","        return f\"Node(count={self.count}, letter='{self.letter}')\"\n","\n","def decode(bit_string, root):\n","    decoded_message = []\n","    current_node = root  # Start at the root of the Huffman tree\n","\n","    for bit in bit_string:\n","        # Traverse the tree based on the bit\n","        if bit == '0':\n","            current_node = current_node.left  # Move left for '0'\n","        elif bit == '1':\n","            current_node = current_node.right  # Move right for '1'\n","\n","        # If we reach a leaf node, record the character and reset to root\n","        if current_node.left is None and current_node.right is None:\n","            decoded_message.append(current_node.letter)  # Record the character\n","            current_node = root  # Go back to the root\n","\n","    return ''.join(decoded_message)  # Join all characters to form the decoded message"]},{"cell_type":"code","execution_count":85,"metadata":{"id":"-ojc98P6fxeK","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1727143781133,"user_tz":-330,"elapsed":468,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"ecca61f8-f599-45cb-de7e-bb5eb844685b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'his is spil p'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":85}],"source":["decode(code, root)"]},{"cell_type":"code","source":[],"metadata":{"id":"lcnXE5THfuB_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f6a4a79b"},"source":["# Getting to Philosophy\n","\n","The goal of this notebook is to develop a Web crawler that tests the\n","\"Getting to Philosophy\" conjecture. As explained on [this Wikipedia page](https://en.wikipedia.org/wiki/Wikipedia:Getting_to_Philosophy):\n","\n","> Clicking on the first link in the main text of an English Wikipedia article, and then repeating the process for subsequent articles, usually leads to the Philosophy article. In February 2016, this was true for 97% of all articles in Wikipedia...\n","\n","More specifically, the link can't be in parentheses or italics, and it can't be an external link, a link to the current page, or a link to a non-existent page.\n","\n","We'll use the `urllib` library to download Wikipedia pages and BeautifulSoup to parse HTML text and navigate the Document Object Model (DOM)."]},{"cell_type":"markdown","metadata":{"id":"e075e092"},"source":["Before we start working with Wikipedia pages, let's warm up with a minimal HTML document, which I've adapted from the BeautifulSoup documentation."]},{"cell_type":"code","execution_count":86,"metadata":{"id":"d55b02f9","executionInfo":{"status":"ok","timestamp":1727143875646,"user_tz":-330,"elapsed":418,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["html_doc = \"\"\"\n","<html><head><title>The Dormouse's story</title></head>\n","<body>\n","<p class=\"title\"><b>The Dormouse's story</b></p>\n","\n","<p class=\"story\">Once upon a time there were three little sisters; and their names were\n","(<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>),\n","<i><a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and</i>\n","<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\n","and they lived at the bottom of a well.</p>\n","\n","<p class=\"story\">...</p>\n","\"\"\""]},{"cell_type":"markdown","metadata":{"id":"edf78b69"},"source":["This document contains three links, but the first one is in parentheses and the second is in italics, so the third is the link we would follow to get to philosophy.\n","\n","Here's how we parse this document and make a `BeautifulSoup` object."]},{"cell_type":"code","execution_count":87,"metadata":{"id":"18daf934","colab":{"base_uri":"https://localhost:8080/","height":187},"executionInfo":{"status":"ok","timestamp":1727143890597,"user_tz":-330,"elapsed":416,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"7af5b870-ea90-440c-a57c-2c877297a7f7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["bs4.BeautifulSoup"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>bs4.BeautifulSoup</b><br/>def __call__(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/bs4/__init__.py</a>A data structure representing a parsed HTML or XML document.\n","\n","Most of the methods you&#x27;ll call on a BeautifulSoup object are inherited from\n","PageElement or Tag.\n","\n","Internally, this class defines the basic interface called by the\n","tree builders when converting an HTML/XML document into a data\n","structure. The interface abstracts away the differences between\n","parsers. To write a new tree builder, you&#x27;ll need to understand\n","these methods as a whole.\n","\n","These methods will be called by the BeautifulSoup constructor:\n","  * reset()\n","  * feed(markup)\n","\n","The tree builder may call these methods from its feed() implementation:\n","  * handle_starttag(name, attrs) # See note about return value\n","  * handle_endtag(name)\n","  * handle_data(data) # Appends to the current data node\n","  * endData(containerClass) # Ends the current data node\n","\n","No matter how complicated the underlying parser is, you should be\n","able to build a tree using &#x27;start tag&#x27; events, &#x27;end tag&#x27; events,\n","&#x27;data&#x27; events, and &quot;done with data&quot; events.\n","\n","If you encounter an empty-element tag (aka a self-closing tag,\n","like HTML&#x27;s &lt;br&gt; tag), call handle_starttag and then\n","handle_endtag.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 76);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":87}],"source":["from bs4 import BeautifulSoup\n","\n","soup = BeautifulSoup(html_doc)\n","type(soup)"]},{"cell_type":"markdown","metadata":{"id":"1c74c8fa"},"source":["To iterate through the elements in the DOM, we can write our own implementation of depth first search, like this:"]},{"cell_type":"code","execution_count":88,"metadata":{"id":"65f13165","executionInfo":{"status":"ok","timestamp":1727143902697,"user_tz":-330,"elapsed":432,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def iterative_DFS(root):\n","    stack = [root]\n","\n","    while(stack):\n","        element = stack.pop()\n","        yield element\n","\n","        children = getattr(element, \"contents\", [])\n","        stack.extend(reversed(children))"]},{"cell_type":"markdown","metadata":{"id":"48850017"},"source":["For example, we can iterate through the elements and print all `NavigableString` elements:"]},{"cell_type":"code","execution_count":89,"metadata":{"id":"53eafee6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727143906363,"user_tz":-330,"elapsed":414,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"d7c6a009-f997-43b4-d07f-3dd4166326f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Dormouse's story\n","\n","The Dormouse's story\n","Once upon a time there were three little sisters; and their names were\n","(Elsie),\n","Lacie and\n","Tillie;\n","and they lived at the bottom of a well.\n","...\n"]}],"source":["from bs4 import NavigableString\n","\n","for element in iterative_DFS(soup):\n","    if isinstance(element, NavigableString):\n","        print(element.string, end='')"]},{"cell_type":"markdown","metadata":{"id":"20b7800a"},"source":["But we can also use `descendants`, which does the same thing."]},{"cell_type":"code","execution_count":90,"metadata":{"id":"625f449d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727143912299,"user_tz":-330,"elapsed":507,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"477fe25c-2327-496b-f99a-b9c274736dbf"},"outputs":[{"output_type":"stream","name":"stdout","text":["The Dormouse's story\n","\n","The Dormouse's story\n","Once upon a time there were three little sisters; and their names were\n","(Elsie),\n","Lacie and\n","Tillie;\n","and they lived at the bottom of a well.\n","...\n"]}],"source":["for element in soup.descendants:\n","    if isinstance(element, NavigableString):\n","        print(element.string, end='')"]},{"cell_type":"markdown","metadata":{"id":"24608925"},"source":["## Checking for Parentheses\n","\n","One theory of software development suggests you should tackle the hardest problem first, because it will drive the design. Then you can figure out how to handle the easier problems.\n","\n","For \"Getting to Philosophy\", one of the harder problems is to figure out whether a link is in parentheses.\n","If you have a link, you could work your way outward looking for enclosing parentheses, but in a tree, that could get complicated.\n","\n","The alternative I chose is to iterate through the text in order, counting open and close parentheses, and yield links only if they are not enclosed."]},{"cell_type":"code","execution_count":91,"metadata":{"tags":[],"id":"aa828190","executionInfo":{"status":"ok","timestamp":1727143916913,"user_tz":-330,"elapsed":429,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["from bs4 import Tag\n","\n","def link_generator(root):\n","    paren_stack = []\n","\n","    for element in root.descendants:\n","        if isinstance(element, NavigableString):\n","            for char in element.string:\n","                if char == '(':\n","                    paren_stack.append(char)\n","                if char == ')':\n","                    paren_stack.pop()\n","\n","        if isinstance(element, Tag) and element.name == \"a\":\n","            if len(paren_stack) == 0:\n","                yield element"]},{"cell_type":"markdown","metadata":{"id":"52b32aff"},"source":["Now we can iterate through the links that are not in parentheses."]},{"cell_type":"code","execution_count":92,"metadata":{"tags":[],"id":"d78b1c21","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727143920392,"user_tz":-330,"elapsed":414,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"e9ee43cd-6188-4f17-cf73-32dad29a30ac"},"outputs":[{"output_type":"stream","name":"stdout","text":["<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n","<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n"]}],"source":["for link in link_generator(soup):\n","    print(link)"]},{"cell_type":"markdown","metadata":{"id":"1054af68"},"source":["## Checking for Italics\n","\n","To see whether a link is in italics, we can:\n","\n","1) If its parent is a `Tag` with name `a`, it's in italics.\n","\n","2) Otherwise we have to check the parent of the parent, and so on.\n","\n","3) If we get to the root without finding an italics tag, it's not in italics."]},{"cell_type":"markdown","metadata":{"id":"4db33e84"},"source":["For example, here's the first link from `link_generator`."]},{"cell_type":"code","execution_count":93,"metadata":{"id":"d35a16e5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727143952449,"user_tz":-330,"elapsed":520,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"3d5c4041-a2ea-48ae-8185-ca8f304d93c5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>"]},"metadata":{},"execution_count":93}],"source":["link = next(link_generator(soup))\n","link"]},{"cell_type":"markdown","metadata":{"id":"6bb6ee09"},"source":["Its parent is an italics tag."]},{"cell_type":"code","execution_count":94,"metadata":{"id":"600997fb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727143955614,"user_tz":-330,"elapsed":514,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"3d6c7adf-5a47-4381-9d2c-f93442ea3fc5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":94}],"source":["parent = link.parent\n","isinstance(parent, Tag)"]},{"cell_type":"code","execution_count":95,"metadata":{"id":"f6875673","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1727143958181,"user_tz":-330,"elapsed":457,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"f166e1af-3ead-407c-ec0c-7b1b16a8b0bb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'i'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":95}],"source":["parent.name"]},{"cell_type":"markdown","metadata":{"id":"fd523372"},"source":["**Exercise:** Write a function called `in_italics` that takes an element and returns `True` if it is in italics."]},{"cell_type":"code","execution_count":96,"metadata":{"id":"af48fbbe","executionInfo":{"status":"ok","timestamp":1727143988907,"user_tz":-330,"elapsed":521,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def in_italics(element):\n","    \"\"\"Checks if an element is enclosed within an italics tag.\"\"\"\n","    current_element = element\n","    while current_element.parent is not None:\n","        if isinstance(current_element.parent, Tag) and current_element.parent.name == 'i':\n","            return True\n","        current_element = current_element.parent\n","    return False\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"93f8f3c5"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"212f4c4c"},"source":["Then write a more general function called `in_bad_element` that takes an element and returns `True` if:\n","\n","* The element or one of its ancestors has a \"bad\" tag name, like `i`, or\n","\n","* The element or one of its ancestors is a `div` whose `class` attribute contains a \"bad\" class name.\n","\n","We will need the general version of this function to exclude invalid links on Wikipedia pages."]},{"cell_type":"code","execution_count":97,"metadata":{"id":"19c4e346","executionInfo":{"status":"ok","timestamp":1727144017567,"user_tz":-330,"elapsed":424,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def in_bad_element(element):\n","    \"\"\"Checks if an element or its ancestors have bad tag names or classes.\"\"\"\n","    current_element = element\n","    while current_element.parent is not None:\n","        if isinstance(current_element.parent, Tag):\n","            if current_element.parent.name in ['i', 'span', 'small']:  # Add more bad tag names if needed\n","                return True\n","            if current_element.parent.name == 'div':\n","                if 'mw-editsection' in current_element.parent.get('class', []):  # Add more bad class names if needed\n","                    return True\n","        current_element = current_element.parent\n","    return False\n"]},{"cell_type":"markdown","metadata":{"id":"a049eea0"},"source":["## Working with Wikipedia Pages\n","\n","Actual Wikipedia pages are more complicated that the simple example, so it will take some effort to understand their structure and make sure we select the right \"first link\".\n","\n","The following cell downloads the Wikipedia page on Python."]},{"cell_type":"code","execution_count":98,"metadata":{"id":"fdb4f5e6","executionInfo":{"status":"ok","timestamp":1727144050963,"user_tz":-330,"elapsed":524,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["from os.path import basename, exists\n","\n","def download(url):\n","    filename = basename(url)\n","    if not exists(filename):\n","        from urllib.request import urlretrieve\n","        local, _ = urlretrieve(url, filename)\n","        print('Downloaded ' + local)"]},{"cell_type":"code","execution_count":99,"metadata":{"id":"95309299","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727144055468,"user_tz":-330,"elapsed":521,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"eb1a54b7-e9ed-46c8-b385-e5a67140bfa7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloaded Python_(programming_language)\n"]}],"source":["url = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\n","download(url)"]},{"cell_type":"markdown","metadata":{"id":"330f5df2"},"source":["Now we can parse it and make `soup`."]},{"cell_type":"code","execution_count":100,"metadata":{"id":"10bb4b22","executionInfo":{"status":"ok","timestamp":1727144062866,"user_tz":-330,"elapsed":3416,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["filename = basename(url)\n","fp = open(filename)\n","soup2 = BeautifulSoup(fp)"]},{"cell_type":"markdown","metadata":{"id":"3ec384e4"},"source":["If you use a web browser to view this page, and use the Inspect Element tool to explore the structure, you'll see that the body of the article is in a `div` element with the class name `mw-body-content`.\n","\n","We can use `find` to get this element, and we'll use it as the root for our searches."]},{"cell_type":"code","execution_count":101,"metadata":{"tags":[],"id":"31215d3b","executionInfo":{"status":"ok","timestamp":1727144071431,"user_tz":-330,"elapsed":405,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["root = soup2.find(class_='mw-body-content')"]},{"cell_type":"markdown","metadata":{"id":"3227b5a6"},"source":["**Exercise:** Write a generator function called `valid_link_generator` that uses `link_generator` to find links that are not in parentheses; then it should filter out links that are not valid, including links that are in italics, links to external pages, etc.\n","\n","Test your function with a few different pages until it reliably finds the \"first link\" that seems most consistent with the spirit of the rules."]},{"cell_type":"code","execution_count":103,"metadata":{"id":"2c2e4729","executionInfo":{"status":"ok","timestamp":1727144155519,"user_tz":-330,"elapsed":519,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["def valid_link_generator(root):\n","    \"\"\"Generates valid Wikipedia internal links from a given root element.\"\"\"\n","    for link in link_generator(root):\n","        if link.has_attr('href'):\n","            href = link['href']\n","            if href.startswith('/wiki/') and not in_bad_element(link) and not ':' in href and not '#' in href:\n","                yield link\n","\n","# Example usage with the 'Python (programming language)' page\n","for link in valid_link_generator(root):\n","    print(link)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f9fd3f47"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"b14f73b3"},"source":["## `WikiFetcher`\n","\n","When you write a Web crawler, it is easy to download too many pages too\n","fast, which might violate the terms of service for the server you are\n","downloading from. To avoid that, we'll use an object called\n","`WikiFetcher` that does two things:\n","\n","1.  It encapsulates the code for downloading and parsing web pages.\n","\n","2.  It measures the time between requests and, if we don't leave enough\n","    time between requests, it sleeps until a reasonable interval has\n","    elapsed. By default, the interval is one second.\n","\n","Here's the definition of `WikiFetcher`:"]},{"cell_type":"code","execution_count":104,"metadata":{"id":"1e6c5654","executionInfo":{"status":"ok","timestamp":1727144159658,"user_tz":-330,"elapsed":449,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}}},"outputs":[],"source":["from urllib.request import urlopen\n","from bs4 import BeautifulSoup\n","from time import time, sleep\n","\n","class WikiFetcher:\n","    next_request_time = None\n","    min_interval = 1  # second\n","\n","    def fetch_wikipedia(self, url):\n","        self.sleep_if_needed()\n","        fp = urlopen(url)\n","        soup = BeautifulSoup(fp, 'html.parser')\n","        return soup\n","\n","    def sleep_if_needed(self):\n","        if self.next_request_time:\n","            sleep_time = self.next_request_time - time()\n","            if sleep_time > 0:\n","                sleep(sleep_time)\n","\n","        self.next_request_time = time() + self.min_interval"]},{"cell_type":"markdown","metadata":{"id":"252b6528"},"source":["`fetch_wikipedia` takes a URL as a\n","`String` and returns a BeautifulSoup object that represents the contents of the page.\n","\n","`sleep_if_needed` checks the time since the last\n","request and sleeps if the elapsed time is less than `min_interval`.\n","\n","Here's an example that demonstrates how it's used:"]},{"cell_type":"code","execution_count":105,"metadata":{"id":"f97c92ea","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727144175666,"user_tz":-330,"elapsed":4787,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"53a45959-a7e1-46d5-d077-82f7829a32f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["1727144170.7573164\n","1727144171.4939172\n","1727144175.0887165\n"]}],"source":["wf = WikiFetcher()\n","url = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\n","\n","print(time())\n","wf.fetch_wikipedia(url)\n","print(time())\n","wf.fetch_wikipedia(url)\n","print(time())"]},{"cell_type":"markdown","metadata":{"id":"5335b9a6"},"source":["If things have gone according to plan, the three timestamps should be no less than 1 second apart, which is consistent with the terms in Wikipedia's [robots.txt](https://en.wikipedia.org/robots.txt):\n","\n","> Friendly, low-speed bots are welcome viewing article pages, but not\n","dynamically-generated pages please."]},{"cell_type":"markdown","metadata":{"id":"66332ab6"},"source":["**Exercise:** Now let's pull it all together. Write a function called `get_to_philosophy` that takes as a parameter the URL of a Wikipedia page. It should:\n","\n","1.  Use the `WikiFetcher` object we just created to download and parse the page.\n","\n","2.  Traverse the resulting `BeautifulSoup` object to find the first valid link according to the spirit of the rules.\n","\n","3.  If the page has no links, or if the first link is a page we have already seen, the program should indicate failure and exit.\n","\n","4.  If the link matches the URL of the Wikipedia page on philosophy, the program should indicate success and exit.\n","\n","5.  Otherwise it should go back to Step 1 (although you might want to put a limit on the number of hops).\n","\n","The program should build a list of the URLs it visits and display the\n","results at the end (whether it succeeds or fails).\n","\n","Since the links you find are relative, you might find the `urljoin` function helpful:"]},{"cell_type":"code","execution_count":106,"metadata":{"id":"ab913376","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1727144205591,"user_tz":-330,"elapsed":522,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"7eeb7a5b-cdbf-4794-af60-ddc30f86f41b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'https://en.wikipedia.org/wiki/Interpreted_language'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":106}],"source":["from urllib.parse import urljoin\n","\n","url = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\n","relative_path = \"/wiki/Interpreted_language\"\n","\n","urljoin(url, relative_path)"]},{"cell_type":"code","execution_count":111,"metadata":{"id":"39848591","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727144700114,"user_tz":-330,"elapsed":3937,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"08658f3b-891e-472f-9c7c-57dec38b3b2d"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Hop 1: Visiting https://en.wikipedia.org/wiki/Python_(programming_language)\n","No valid links found on this page. Failure.\n","Visited URLs: {'https://en.wikipedia.org/wiki/Python_(programming_language)'}\n"]}],"source":["from collections import Counter\n","from collections import namedtuple\n","from bs4 import BeautifulSoup\n","from bs4 import NavigableString\n","from bs4 import Tag\n","from os.path import basename, exists\n","from urllib.request import urlretrieve\n","from urllib.request import urlopen\n","from time import time, sleep\n","from urllib.parse import urljoin\n","\n","\n","def link_generator(root):\n","    paren_stack = []\n","\n","    for element in root.descendants:\n","        if isinstance(element, NavigableString):\n","            for char in element.string:\n","                if char == '(':\n","                    paren_stack.append(char)\n","                if char == ')':\n","                    if paren_stack:  # Ensure there's something to pop\n","                        paren_stack.pop()\n","\n","        if isinstance(element, Tag) and element.name == \"a\":\n","            if len(paren_stack) == 0:\n","                yield element\n","\n","\n","def in_italics(element):\n","    \"\"\"Checks if an element is enclosed within an italics tag.\"\"\"\n","    current_element = element\n","    while current_element.parent is not None:\n","        if isinstance(current_element.parent, Tag) and current_element.parent.name == 'i':\n","            return True\n","        current_element = current_element.parent\n","    return False\n","\n","\n","def in_bad_element(element):\n","    \"\"\"Checks if an element or its ancestors have bad tag names or classes.\"\"\"\n","    current_element = element\n","    while current_element.parent is not None:\n","        if isinstance(current_element.parent, Tag):\n","            if current_element.parent.name in ['i', 'span', 'small']:  # Add more bad tag names if needed\n","                return True\n","            if current_element.parent.name == 'div':\n","                if 'mw-editsection' in current_element.parent.get('class', []):  # Add more bad class names if needed\n","                    return True\n","        current_element = current_element.parent\n","    return False\n","\n","def valid_link_generator(root):\n","    \"\"\"Generates valid Wikipedia internal links from a given root element.\"\"\"\n","    for link in link_generator(root):\n","        if link.has_attr('href'):\n","            href = link['href']\n","            is_italic = in_italics(link)\n","            is_bad = in_bad_element(link)\n","\n","            # Check validity of the link: must contain 'https' and '/wiki/'\n","            if 'https' in href and '/wiki/' in href and not is_bad and not ':' in href and not '#' in href:\n","                print(f\"Valid Link: {link['href']} (Italic: {is_italic})\")\n","                yield link\n","            else:\n","                print(f\"Not Valid Link: {link['href']} (Italic: {is_italic})\")\n","\n","\n","class WikiFetcher:\n","    next_request_time = None\n","    min_interval = 1  # second\n","\n","    def fetch_wikipedia(self, url):\n","        self.sleep_if_needed()\n","        fp = urlopen(url)\n","        soup = BeautifulSoup(fp, 'html.parser')\n","        return soup\n","\n","    def sleep_if_needed(self):\n","        if self.next_request_time:\n","            sleep_time = self.next_request_time - time()\n","            if sleep_time > 0:\n","                sleep(sleep_time)\n","\n","        self.next_request_time = time() + self.min_interval\n","\n","\n","def get_to_philosophy(start_url, max_hops=25):\n","    wf = WikiFetcher()\n","    visited_urls = set()\n","    current_url = start_url\n","    philosophy_url = \"https://en.wikipedia.org/wiki/Philosophy\"\n","\n","    for i in range(max_hops):\n","        print(f\"\\nHop {i + 1}: Visiting {current_url}\")\n","        visited_urls.add(current_url)\n","\n","        try:\n","            soup = wf.fetch_wikipedia(current_url)\n","\n","            # Print the HTML content of the page\n","            # print(soup.prettify())\n","\n","            root = soup.find(class_='mw-body-content')\n","\n","            # Generate and print all valid links from the page\n","            for link in valid_link_generator(root):\n","                pass  # Links are printed inside the generator\n","\n","            first_link = next(valid_link_generator(root), None)\n","\n","            if first_link is None:\n","                print(\"No valid links found on this page. Failure.\")\n","                break\n","\n","            next_url = urljoin(current_url, first_link['href'])\n","\n","            if next_url in visited_urls:\n","                print(\"Link already visited. Failure.\")\n","                break\n","\n","            if next_url == philosophy_url:\n","                print(\"Success! Reached Philosophy page.\")\n","                break\n","\n","            current_url = next_url\n","\n","        except Exception as e:\n","            print(f\"Error: {e}. Failure.\")\n","            break\n","\n","    else:\n","        print(\"Maximum hops reached. Failure.\")\n","\n","    print(\"Visited URLs:\", visited_urls)\n","\n","\n","if __name__ == \"__main__\":\n","    start_url = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\n","    get_to_philosophy(start_url)"]},{"cell_type":"code","execution_count":112,"metadata":{"id":"147b670c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727144705724,"user_tz":-330,"elapsed":920,"user":{"displayName":"Bot AI","userId":"03361843878475827912"}},"outputId":"70962b82-2d27-473b-f6ba-c174fa0e6002"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Hop 1: Visiting https://en.wikipedia.org/wiki/Python_(programming_language)\n","No valid links found on this page. Failure.\n","Visited URLs: {'https://en.wikipedia.org/wiki/Python_(programming_language)'}\n"]}],"source":["get_to_philosophy(url)"]}]}